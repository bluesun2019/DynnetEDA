% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downstream_tasks.R
\name{active_calculation}
\alias{active_calculation}
\title{Calculate the active time points for each node}
\usage{
active_calculation(node, net, timestamp_vec = NULL)
}
\arguments{
\item{node}{the node for the active time points calculation.}

\item{net}{an array where each slice is a snapshot of the dynamic network.}

\item{timestamp_vec}{(optional) the observed time points of observation.}
}
\value{
If timestamp_vec = NULL, output the indecies of snapshots where the node is active; otherwise, output the time points where the node is active
}
\description{
If the node has any links with others, we regard it as 'active'; otherwise, we regard it as 'inactive'.
}
\examples{
ER_varynodes <- function(n, p, t) {
  adjacency_matrix <- matrix(0, nrow = n, ncol = n)

  active_nodes <- unique(c((floor((t - 1) / 10) * 10 + 1):((floor((t - 1) / 10) + 1) * 10), 80:100))
  for (i in active_nodes) {
    for (j in active_nodes) {
      if (i > j) {
        adjacency_matrix[i, j] <- sample(c(0, 1), size = 1, prob = c(1 - p, p))
      }
    }
    adjacency_matrix[i, i] <- 0.5
  }
  adjacency_matrix + t(adjacency_matrix)
}

set.seed(10)
n_nodes <- 100
T <- 100
p <- 0.1
C <- c(rep(2, times = 79), rep(1, times = 21))
dynamic_adjacency <- c()
dynamic_network_adjacency <- array(0, dim = c(n_nodes, n_nodes, T))
for (t in 1:T) {
  adj <- ER_varynodes(n_nodes, p, t)
  dynamic_adjacency <- c(dynamic_adjacency, list(list(adj)))
  dynamic_network_adjacency[, , t] <- adj
}
active_points <- lapply(1:100, active_calculation, dynamic_network_adjacency)
}
