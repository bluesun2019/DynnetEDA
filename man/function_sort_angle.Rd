% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downstream_tasks.R
\name{function_sort_angle}
\alias{function_sort_angle}
\title{Sort degree-corrected latent functions into a dataframe}
\usage{
function_sort_angle(X, timestamp_vec, active_points = NULL)
}
\arguments{
\item{X}{a T*n*d latent function value array.}

\item{timestamp_vec}{T vector. time points corresponding to the first dimension of X.}

\item{active_points}{list. a list of time points for each node. if NULL, regard all nodes active at all time points. default NULL.}
}
\value{
a dataframe containing the latent function value for each node at each time point.
}
\description{
Transform a T*n*d latent function value array into a dataframe for the sake of plotting, with radius correction.
}
\examples{
ER_generation <- function(n, p) {
  adjacency_matrix <- matrix(0, nrow = n, ncol = n)
  for (i in 2:n) {
    for (j in 1:(i - 1)) {
      adjacency_matrix[i, j] <- sample(c(0, 1), size = 1, prob = c(1 - p, p))
    }
    adjacency_matrix[i, i] <- 0.5
  }
  adjacency_matrix + t(adjacency_matrix)
}
ER_varynodes <- function(n, p, t) {
  adjacency_matrix <- matrix(0, nrow = n, ncol = n)

  active_nodes <- unique(c((floor((t - 1) / 10) * 10 + 1):((floor((t - 1) / 10) + 1) * 10), 80:100))
  for (i in active_nodes) {
    for (j in active_nodes) {
      if (i > j) {
        adjacency_matrix[i, j] <- sample(c(0, 1), size = 1, prob = c(1 - p, p))
      }
    }
    adjacency_matrix[i, i] <- 0.5
  }
  adjacency_matrix + t(adjacency_matrix)
}
set.seed(10)
n_nodes = 100
T = 100
p = 0.1
C = c(rep(2,times=79),rep(1,times=21))
dynamic_adjacency = c()
dynamic_network_adjacency = array(0, dim = c(n_nodes, n_nodes,T))
for(t in 1:T){
  adj = ER_varynodes(n_nodes,p,t)
  dynamic_adjacency = c(dynamic_adjacency,list(list(adj)))
  dynamic_network_adjacency[,,t] = adj
}
data("varySBM_example_fASE0.rda")
result_varySBM0 = varySBM_example_fASE0[[1]]
embedding_DCBM0 = fda::eval.fd(1:100, result_varySBM0[[1]])
active_points = lapply(1:100, active_calculation, dynamic_network_adjacency, timestamp_vec = 1:100)
node_embedding_frame0 = function_sort_angle(embedding_DCBM0, 1:100,active_points=active_points)
node_embedding_frame0 = cbind(node_embedding_frame0, label = factor(rep(C, each = T)))
func_plot_x1 = ggplot(node_embedding_frame0,aes_string(x="t",y=paste0("x",1),group="i",color="label"))+geom_line(aes(alpha=label,size=label))+scale_color_manual(values=c("#FA7F6F","#82B0D2"))+scale_size_manual(values= c(0.8,0.8))+scale_alpha_manual(values= c(0.8,0.8))+guides(color=guide_legend(override.aes = list(size=2)))+theme_bw()
}
