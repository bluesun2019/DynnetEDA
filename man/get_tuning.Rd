% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional_ASE.R
\name{get_tuning}
\alias{get_tuning}
\title{Get the optimal hyperparameters from an NGCV list.}
\usage{
get_tuning(NGCV_list)
}
\arguments{
\item{NGCV_list}{the matrix obtained by the fASE_tuning function.}
}
\value{
a list of optimal hyperparameters
}
\description{
Get the optimal hyperparameters from an NGCV list.
}
\examples{
\donttest{
ER_generation <- function(n, p) {
  adjacency_matrix <- matrix(0, nrow = n, ncol = n)
  for (i in 2:n) {
    for (j in 1:(i - 1)) {
      adjacency_matrix[i, j] <- sample(c(0, 1), size = 1, prob = c(1 - p, p))
    }
    adjacency_matrix[i, i] <- 0.5
  }
  adjacency_matrix + t(adjacency_matrix)
}
set.seed(10)
n_nodes <- 10
T <- 10
p <- 0.2
dynamic_adjacency <- c()
dynamic_network_adjacency <- array(0, dim = c(n_nodes, n_nodes, T))
for (t in 1:T) {
  adj <- ER_generation(n_nodes, p)
  dynamic_adjacency <- c(dynamic_adjacency, list(list(adj)))
  dynamic_network_adjacency[, , t] <- adj
}
tuning_sim1 <- fASE_tuning(5:8, 4:5, tuning_method = "heuristic", adjacency_tensor = dynamic_network_adjacency, spline_order = 4, batch_size = NULL, kernel_scale = FALSE, timestamp_vec = NULL, scalable_method = TRUE, scalable_dim = 30, scalable_power = 6, iteration_step = 2500, epsilon = 1e-3)
tuning_parameter1 <- get_tuning(tuning_sim1)
}
}
