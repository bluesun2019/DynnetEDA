% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/downstream_tasks.R
\name{cd_plot}
\alias{cd_plot}
\title{draw the cd(community detection)/dccd(degree-corrected community detection) plot}
\usage{
cd_plot(
  embedding_fASE,
  timestamp_vec,
  radius_corrected = TRUE,
  active_corrected = FALSE,
  active_points = NULL,
  cluster = NULL,
  label = NULL,
  cluster_color = NULL,
  label_color = NULL,
  point_size = NULL
)
}
\arguments{
\item{embedding_fASE}{an T*n*d array, containing values of the resulting latent functions obtained by fASE function at timestamp_vec.}

\item{timestamp_vec}{T vector. the observed time points of observation.}

\item{radius_corrected}{(optional) logical. if radius_corrected = TRUE, then each latent function is divided by its radius function to correct the degree effect. default TRUE.}

\item{active_corrected}{(optional) logical. if active_corrected = TRUE, then each latent function is divided by the active time of the corresponding node to correct the active duration effect. default FALSE.}

\item{active_points}{(optional) list whose length is the number of nodes. when active_corrected = TRUE, active_points is required to provide the active time of each node.}

\item{cluster}{(optional) vector. the community label obtained by some clustering method.}

\item{label}{(optional) vector. the true community label.}

\item{cluster_color}{(optional) vector. colors for each community obtained by some clustering method.}

\item{label_color}{(optional) vector. colors for each true community.}

\item{point_size}{(optional) scalar. point size.}
}
\value{
a ggplot2 object of the cd plot.
}
\description{
Perform a (radius-corrected) MVFPCA on latent functions, and then draw the (degree-corrected) community detection plot.
}
\examples{
data("DCBM_example_fASE0.rda")
result_DCBM0 <- DCBM_example_fASE0[[1]]
deg <- DCBM_example_fASE0[[2]]
embedding_DCBM0 <- fda::eval.fd(1:100, result_DCBM0[[1]])
PCA_score <- fPCA_angle(embedding_DCBM0, 1:100, 20)
clus_res <- cluster_no_selection(PCA_score[[1]], 10)
PCA_score <- fPCA_angle(embedding_DCBM0, 1:100, 2)
C <- c(rep(1, times = 25), rep(3, times = 25), rep(5, times = 25), rep(2, times = 25), rep(4, times = 10))
cdplot <- cd_plot(embedding_DCBM0, 1:100, cluster = clus_res[[2]]$cluster, label = C)
}
